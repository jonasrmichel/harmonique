// This is your Prisma schema file for SQLite (simpler local development)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  bio           String?
  spotifyId     String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
  following     Follow[]   @relation("Following")
  followers     Follow[]   @relation("Followers")
  likes         Like[]
  comments      Comment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Playlist {
  id              String    @id @default(cuid())
  name            String
  description     String?
  coverImage      String?
  spotifyId       String?   @unique
  isPublic        Boolean   @default(true)
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks          Track[]
  likes           Like[]
  comments        Comment[]
  tags            Tag[]

  @@index([userId])
  @@map("playlists")
}

model Track {
  id              String    @id @default(cuid())
  spotifyId       String
  name            String
  artist          String
  album           String?
  duration        Int?      // Duration in milliseconds
  previewUrl      String?
  imageUrl        String?
  addedAt         DateTime  @default(now())
  playlistId      String

  // Relations
  playlist        Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([spotifyId, playlistId])
  @@index([playlistId])
  @@map("tracks")
}

model Follow {
  id              String    @id @default(cuid())
  followerId      String
  followingId     String
  createdAt       DateTime  @default(now())

  // Relations
  follower        User      @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following       User      @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Like {
  id              String    @id @default(cuid())
  userId          String
  playlistId      String
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist        Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([userId, playlistId])
  @@index([userId])
  @@index([playlistId])
  @@map("likes")
}

model Comment {
  id              String    @id @default(cuid())
  content         String
  userId          String
  playlistId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist        Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId])
  @@index([userId])
  @@map("comments")
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  createdAt       DateTime  @default(now())

  // Relations
  playlists       Playlist[]

  @@map("tags")
}