// This is your Prisma schema file for SQLite (simpler local development)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  bio           String?
  spotifyId     String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
  following     Follow[]   @relation("Following")
  followers     Follow[]   @relation("Followers")
  likes         Like[]
  comments      Comment[]
  nowPlaying    NowPlaying?
  listeningAlong ListenAlong[] @relation("ListenerSessions")
  listenedBy    ListenAlong[] @relation("TargetSessions")
  tasteProfile  UserTasteProfile?
  similaritiesA UserSimilarity[] @relation("SimilarityUserA")
  similaritiesB UserSimilarity[] @relation("SimilarityUserB")
  sentEmotes    Emote[]   @relation("SentEmotes")
  receivedEmotes Emote[]  @relation("ReceivedEmotes")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Playlist {
  id              String    @id @default(cuid())
  name            String
  description     String?
  coverImage      String?
  spotifyId       String?   @unique
  isPublic        Boolean   @default(true)
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks          Track[]
  likes           Like[]
  comments        Comment[]
  tags            Tag[]

  @@index([userId])
  @@map("playlists")
}

model Track {
  id              String    @id @default(cuid())
  spotifyId       String
  name            String
  artist          String
  album           String?
  duration        Int?      // Duration in milliseconds
  previewUrl      String?
  imageUrl        String?
  addedAt         DateTime  @default(now())
  playlistId      String

  // Relations
  playlist        Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([spotifyId, playlistId])
  @@index([playlistId])
  @@map("tracks")
}

model Follow {
  id              String    @id @default(cuid())
  followerId      String
  followingId     String
  createdAt       DateTime  @default(now())

  // Relations
  follower        User      @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following       User      @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Like {
  id              String    @id @default(cuid())
  userId          String
  playlistId      String
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist        Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([userId, playlistId])
  @@index([userId])
  @@index([playlistId])
  @@map("likes")
}

model Comment {
  id              String    @id @default(cuid())
  content         String
  userId          String
  playlistId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist        Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId])
  @@index([userId])
  @@map("comments")
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  createdAt       DateTime  @default(now())

  // Relations
  playlists       Playlist[]

  @@map("tags")
}

model NowPlaying {
  id              String    @id @default(cuid())
  userId          String    @unique
  trackId         String?
  trackName       String
  artistNames     String    // Comma-separated list of artist names
  albumName       String?
  albumImage      String?
  duration        Int       // Duration in milliseconds
  progress        Int       // Progress in milliseconds
  isPlaying       Boolean
  volume          Int?      @default(50) // Volume percentage (0-100)
  contextType     String?   // playlist, album, artist, etc.
  contextUri      String?   // spotify:playlist:xxx, etc.
  contextName     String?   // Name of the playlist/album
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
  @@map("now_playing")
}

model ListenAlong {
  id              String    @id @default(cuid())
  listenerId      String
  targetUserId    String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  listener        User      @relation("ListenerSessions", fields: [listenerId], references: [id], onDelete: Cascade)
  targetUser      User      @relation("TargetSessions", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([listenerId, targetUserId])
  @@index([listenerId])
  @@index([targetUserId])
  @@index([isActive])
  @@map("listen_along_sessions")
}

model UserTasteProfile {
  id              String    @id @default(cuid())
  userId          String    @unique

  // Spotify taste data (stored as JSON strings)
  topArtists      String?   // JSON: Array of {id, name, genres, images, popularity}
  topTracks       String?   // JSON: Array of {id, name, artists, album, popularity}
  topGenres       String?   // JSON: Array of genre strings with frequency
  followedArtists String?   // JSON: Array of followed artist IDs

  // Audio profile averages (0.0 to 1.0)
  avgDanceability Float?
  avgEnergy       Float?
  avgValence      Float?    // Musical positivity
  avgAcousticness Float?
  avgTempo        Float?     // BPM
  avgLoudness     Float?     // dB

  // Discovery settings
  isDiscoverable  Boolean   @default(true)
  showTopArtists  Boolean   @default(true)
  showTopTracks   Boolean   @default(true)
  showGenres      Boolean   @default(true)

  // Metadata
  lastAnalyzed    DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isDiscoverable])
  @@index([lastAnalyzed])
  @@map("user_taste_profiles")
}

model UserSimilarity {
  id              String    @id @default(cuid())
  userAId         String
  userBId         String

  // Similarity scores (0.0 to 1.0)
  overallScore    Float
  artistScore     Float?
  trackScore      Float?
  genreScore      Float?
  audioScore      Float?    // Audio features similarity

  // Shared elements (stored as JSON strings)
  commonArtists   String?   // JSON: Array of shared artist objects
  commonTracks    String?   // JSON: Array of shared track objects
  commonGenres    String?   // JSON: Array of shared genres

  calculatedAt    DateTime  @default(now())

  // Relations
  userA           User      @relation("SimilarityUserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB           User      @relation("SimilarityUserB", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
  @@index([userAId, overallScore])
  @@index([userBId, overallScore])
  @@index([calculatedAt])
  @@map("user_similarities")
}

model Emote {
  id              String    @id @default(cuid())
  senderId        String
  recipientId     String
  emoji           String    // The emoji character(s)
  context         String?   // Context like "listening-now" or track ID

  // Status tracking
  delivered       Boolean   @default(false)
  seen            Boolean   @default(false)

  createdAt       DateTime  @default(now())
  expiresAt       DateTime  // Emotes expire after a short time

  // Relations
  sender          User      @relation("SentEmotes", fields: [senderId], references: [id], onDelete: Cascade)
  recipient       User      @relation("ReceivedEmotes", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId, delivered])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("emotes")
}